/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.raft.proto";
option java_outer_classname = "RaftClientProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package raft.hadoop;

import "Raft.proto";

message ClientMessageEntryProto {
  bytes content = 1;
}

// normal client request
message RaftClientRequestProto {
  raft.common.RaftRpcRequestProto rpcRequest = 1;
  ClientMessageEntryProto message = 2;
  bool readOnly = 3;
}

message RaftClientReplyProto {
  raft.common.RaftRpcReplyProto rpcReply = 1;
  ClientMessageEntryProto message = 2;
  // the following 3 fields are used to indicate the server is not leader
  bool isNotLeader = 3;
  raft.common.RaftPeerProto suggestedLeader = 4;
  repeated raft.common.RaftPeerProto peersInConf = 5;
}

// setConfiguration request
message SetConfigurationRequestProto {
  raft.common.RaftRpcRequestProto rpcRequest = 1;
  repeated raft.common.RaftPeerProto peers = 2;
}

service RaftClientProtocolService {
  rpc submitClientRequest(RaftClientRequestProto)
      returns(RaftClientReplyProto);

  rpc setConfiguration(SetConfigurationRequestProto)
      returns(RaftClientReplyProto);
}

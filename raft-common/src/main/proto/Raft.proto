/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.raft.proto";
option java_outer_classname = "RaftProtos";
option java_generate_equals_and_hash = true;
package raft.common;

message RaftPeerProto {
  string id = 1;      // id of the peer
  string address = 2; // e.g. IP address, hostname etc.
}

message RaftConfigurationProto {
  repeated RaftPeerProto peers = 1; // the peers in the current or new conf
  repeated RaftPeerProto oldPeers = 2; // the peers in the old conf
}

message SMLogEntryProto {
  // TODO: This is not super efficient if the SM itself uses PB to serialize its own data for a
  // log entry. Data will be copied twice. We should directly support having any Message from SM
  bytes data = 1;
}

message LogEntryProto {
  enum Type {
    CLIENT_MESSAGE = 0;
    CONFIGURATION = 1;
    PLACEHOLDER = 2;
  }

  uint64 term = 1;
  uint64 index = 2;
  Type type = 3; // the type of the log entry

  SMLogEntryProto smLogEntry = 4;
  RaftConfigurationProto configurationEntry = 5;
}

message TermIndexProto {
  uint64 term = 1;
  uint64 index = 2;
}

message RaftRpcMessageProto {
  string requestorId = 1;
  string replyId = 2;
}

message RaftRpcRequestProto {
  RaftRpcMessageProto rpcMessage = 1;
}

message RaftRpcReplyProto {
  RaftRpcMessageProto rpcMessage = 1;
  bool success = 2;
}

message FileChunkProto {
  string filename = 1; // relative to root
  uint64 totalSize = 2;
  bytes fileDigest = 3;
  uint32 chunkIndex = 4;
  uint64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

enum InstallSnapshotResult {
  SUCCESS = 0;
  NOT_LEADER = 1;
}


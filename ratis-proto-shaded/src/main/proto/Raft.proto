/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.ratis.shaded.proto";
option java_outer_classname = "RaftProtos";
option java_generate_equals_and_hash = true;
package ratis.common;

message RaftPeerProto {
  bytes id = 1;      // id of the peer
  string address = 2; // e.g. IP address, hostname etc.
}

message RaftGroupIdProto {
  bytes id = 1;
}

message RaftGroupProto {
  RaftGroupIdProto groupId = 1;
  repeated RaftPeerProto peers = 2;
}

message RaftConfigurationProto {
  repeated RaftPeerProto peers = 1; // the peers in the current or new conf
  repeated RaftPeerProto oldPeers = 2; // the peers in the old conf
}

message SMLogEntryProto {
  // TODO: This is not super efficient if the SM itself uses PB to serialize its own data for a
  // log entry. Data will be copied twice. We should directly support having any Message from SM
  bytes data = 1;

  bytes stateMachineData = 2; // State machine specific data which is not written to log.
}

message LeaderNoOp {
  // empty
}

message LogEntryProto {
  uint64 term = 1;
  uint64 index = 2;

  oneof LogEntryBody {
    SMLogEntryProto smLogEntry = 3;
    RaftConfigurationProto configurationEntry = 4;
    LeaderNoOp noOp = 5;
  }

  // clientId and callId are used to rebuild the retry cache. They're not
  // necessary for configuration change since re-conf is idempotent.
  bytes clientId = 6;
  uint64 callId = 7;
}

message TermIndexProto {
  uint64 term = 1;
  uint64 index = 2;
}

message RaftRpcRequestProto {
  bytes requestorId = 1;
  bytes replyId = 2;
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;

  uint64 seqNum = 15;
}

message RaftRpcReplyProto {
  bytes requestorId = 1;
  bytes replyId = 2;
  RaftGroupIdProto raftGroupId = 3;
  uint64 callId = 4;

  bool success = 15;
}

message FileChunkProto {
  string filename = 1; // relative to root
  uint64 totalSize = 2;
  bytes fileDigest = 3;
  uint32 chunkIndex = 4;
  uint64 offset = 5;
  bytes data = 6;
  bool done = 7;
}

enum InstallSnapshotResult {
  SUCCESS = 0;
  NOT_LEADER = 1;
}

message RequestVoteRequestProto {
  RaftRpcRequestProto serverRequest = 1;
  uint64 candidateTerm = 2;
  TermIndexProto candidateLastEntry = 3;
}

message RequestVoteReplyProto {
  RaftRpcReplyProto serverReply = 1;
  uint64 term = 2;
  bool shouldShutdown = 3;
}

message CommitInfoProto {
  RaftPeerProto server = 1;
  uint64 commitIndex = 2;
}

message AppendEntriesRequestProto {
  RaftRpcRequestProto serverRequest = 1;
  uint64 leaderTerm = 2;
  TermIndexProto previousLog = 3;
  repeated LogEntryProto entries = 4;
  uint64 leaderCommit = 5;
  bool initializing = 6;

  repeated CommitInfoProto commitInfos = 15;
}

message AppendEntriesReplyProto {
  enum AppendResult {
    SUCCESS = 0;
    NOT_LEADER = 1; // the requester's term is not large enough
    INCONSISTENCY = 2; // gap between the local log and the entries
  }

  RaftRpcReplyProto serverReply = 1;
  uint64 term = 2;
  uint64 nextIndex = 3;
  AppendResult result = 4;
}

message InstallSnapshotRequestProto {
  RaftRpcRequestProto serverRequest = 1;
  string requestId = 2; // an identifier for chunked-requests.
  uint32 requestIndex = 3; // the index for this request chunk. Starts from 0.
  RaftConfigurationProto raftConfiguration = 4;
  uint64 leaderTerm = 5;
  TermIndexProto termIndex = 6;
  repeated FileChunkProto fileChunks = 7;
  uint64 totalSize = 8;
  bool done = 9; // whether this is the final chunk for the same req.
}

message InstallSnapshotReplyProto {
  RaftRpcReplyProto serverReply = 1;
  uint32 requestIndex = 2;
  uint64 term = 3;
  InstallSnapshotResult result = 4;
}

message ClientMessageEntryProto {
  bytes content = 1;
}

enum ReplicationLevel {
  MAJORITY = 0;
  ALL = 1;
}

message WriteRequestTypeProto {
  ReplicationLevel replication = 1;
}

message ReadRequestTypeProto {
}

message StaleReadRequestTypeProto {
  uint64 minIndex = 1;
}

// normal client request
message RaftClientRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  ClientMessageEntryProto message = 2;

  oneof Type {
    WriteRequestTypeProto write = 3;
    ReadRequestTypeProto read = 4;
    StaleReadRequestTypeProto staleRead = 5;
  }
}

message NotLeaderExceptionProto {
  RaftPeerProto suggestedLeader = 1;
  repeated RaftPeerProto peersInConf = 2;
}

message NotReplicatedExceptionProto {
  uint64 callId = 1;
  ReplicationLevel replication = 2;
  uint64 logIndex = 3;
}

message StateMachineExceptionProto {
  string exceptionClassName = 1;
  string errorMsg = 2;
  bytes stacktrace = 3;
}

message RaftClientReplyProto {
  RaftRpcReplyProto rpcReply = 1;
  ClientMessageEntryProto message = 2;

  oneof ExceptionDetails {
    NotLeaderExceptionProto notLeaderException = 3;
    NotReplicatedExceptionProto notReplicatedException = 4;
    StateMachineExceptionProto stateMachineException = 5;
  }

  repeated CommitInfoProto commitInfos = 15;
}

// setConfiguration request
message SetConfigurationRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  repeated RaftPeerProto peers = 2;
}

// reinitialize request
message ReinitializeRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
  RaftGroupProto group = 2; // the target group.
}

// server info request
message ServerInformationRequestProto {
  RaftRpcRequestProto rpcRequest = 1;
}

message ServerInformationReplyProto {
  RaftRpcReplyProto rpcReply = 1;
  RaftGroupProto group = 2;
  repeated CommitInfoProto commitInfos = 3;
}

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "org.apache.ratis.proto.logservice";
option java_outer_classname = "LogServiceProtos";
option java_generate_equals_and_hash = true;
package ratis.logservice;


// Generic message for Log Service exception
message LogServiceException {
  string exceptionClassName = 1;
  string errorMsg = 2;
  bytes stacktrace = 3;
}

// Write request (append log entry(ies))
message AppendLogEntryRequestProto {
	LogNameProto logName = 1;
	repeated bytes data = 2;
}

// Write reply
message AppendLogEntryReplyProto {
	repeated uint64 recordId = 1;
	// optional
	LogServiceException exception = 2;
}


// Sync log (make all previous writes durable)
message SyncLogRequestProto {
	LogNameProto logName = 1;
}

// Sync reply
message SyncLogReplyProto {
	// optional
	LogServiceException exception = 1;
}

// Read request
message ReadLogRequestProto {
	LogNameProto logName = 1;
	uint32 numRecords = 2;
	// start record id
	uint64 startRecordId = 3;
}

// Read reply
message ReadLogReplyProto {
	repeated bytes logRecord = 1;
	// optional
	LogServiceException exception = 2;
}

// Get log length request
message GetLogLengthRequestProto {
	LogNameProto logName = 1;
}

// Get log length reply
message GetLogLengthReplyProto {
	uint64 length = 1;
	//optional 
	LogServiceException exception = 2;
}

message GetLogStartIndexRequestProto {
	LogNameProto logName  = 1;
}

message GetLogStartIndexReplyProto {
	uint64 startIndex = 1;
	//optional
	LogServiceException exception = 2;
}

message LogServiceRequestProto {
  oneof Request {
    CreateLogRequestProto createLog = 1;
    ListLogsRequestProto listLogs = 2;
    GetLogRequestProto getLog = 3;
    CloseLogRequestProto closeLog = 4;
    GetStateRequestProto getState = 5;
    ArchiveLogRequestProto archiveLog = 6;
    DeleteLogRequestProto deleteLog = 7;
    ReadLogRequestProto readNextQuery = 8;
    GetLogLengthRequestProto lengthQuery = 9;
	GetLogStartIndexRequestProto startIndexQuery = 10; 
	AppendLogEntryRequestProto appendRequest = 11;
	SyncLogRequestProto          syncRequest = 12;
  }
}


message LogNameProto {
  string name = 1;
}

message CreateLogRequestProto {
  LogNameProto logName = 1;
}

message ListLogsRequestProto {
  repeated LogStreamProto logSreams = 1;
}

message GetLogRequestProto {
  LogNameProto logName = 1;
}

message CloseLogRequestProto {
  LogNameProto logName = 1;
}

message GetStateRequestProto {
  LogNameProto logName = 1;
}

message ArchiveLogRequestProto {
  LogNameProto logName = 1;
}

message DeleteLogRequestProto {
  LogNameProto logName = 1;
}

message LogStreamProto {
  LogNameProto logName = 1;
  uint64 size = 2;
  LogStreamState state = 3;
}

enum LogStreamState {
  OPEN = 0;
  CLOSED = 1;
}

message CreateLogReplyProto {
  LogStreamProto logStream = 1;
}

message GetLogReplyProto {
  LogStreamProto logStream = 1;
}

message ListLogsReplyProto {
  repeated LogStreamProto logStrems = 1;
}

message CloseLogReplyProto {
}

message GetStateReplyProto {
  LogStreamState state = 1;
}

message ArchiveLogReplyProto {
}

message DeleteLogReplyProto {
}

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
option java_package = "org.apache.raft.proto";
option java_outer_classname = "RaftServerProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package common.raft;

import "Raft.proto";

message RaftServerRequestProto {
  required RaftRpcRequestProto rpcRequest = 1;
}

message RaftServerReplyProto {
  required RaftRpcReplyProto rpcReply = 1;
  required uint64 term = 2;
}

message RequestVoteRequestProto {
  required RaftServerRequestProto serverRequest = 1;
  required uint64 candidateTerm = 2;
  optional TermIndexProto candidateLastEntry = 3;
}

message RequestVoteReplyProto {
  required RaftServerReplyProto serverReply = 1;
  required bool shouldShutdown = 2;
}

message AppendEntriesRequestProto {
  required RaftServerRequestProto serverRequest = 1;
  required uint64 leaderTerm = 2;
  optional TermIndexProto previousLog = 3;
  repeated LogEntryProto entries = 4;
  required uint64 leaderCommit = 5;
  required bool initializing = 6;
}

message AppendEntriesReplyProto {
  enum AppendResult {
    SUCCESS = 1;
    NOT_LEADER = 2;
    INCONSISTENCY = 3;
  }

  required RaftServerReplyProto serverReply = 1;
  required uint64 nextIndex = 2;
  required AppendResult result = 3;
}

message SnapshotChunkProto {
  optional uint64 offset = 1;
  optional bytes data = 2;
  optional uint32 chunkIndex = 3;
}

message InstallSnapshotRequestProto {
  optional RaftServerRequestProto serverRequest = 1;
  optional uint64 leaderTerm = 2;
  optional uint64 lastIncludedIndex = 3;
  optional uint64 lastIncludedTerm = 4;
  optional SnapshotChunkProto chunk = 5;
  optional uint64 totalSize = 6;
  optional bytes fileDigest = 7;
}

message InstallSnapshotReplyProto {
  enum InstallSnapshotResult {
    SUCCESS = 1;
    NOT_LEADER = 2;
  }

  optional RaftServerReplyProto serverReply = 1;
  optional InstallSnapshotResult result = 2;
}

service RaftServerProtocolService {
  rpc requestVote(RequestVoteRequestProto)
      returns(RequestVoteReplyProto);

  rpc appendEntries(AppendEntriesRequestProto)
      returns(AppendEntriesReplyProto);

  rpc installSnapshot(InstallSnapshotRequestProto)
      returns(InstallSnapshotReplyProto);
}
